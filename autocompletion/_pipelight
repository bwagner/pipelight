#compdef pipelight

autoload -U is-at-least

_pipelight() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'::raw -- Pass those arguments to deno:' \
":: :_pipelight_commands" \
"*::: :->pipelight" \
&& ret=0
    case $state in
    (pipelight)
        words=($line[2] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pipelight-command-$line[2]:"
        case $line[2] in
            (enable)
_arguments "${_arguments_options[@]}" \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'::raw -- Pass those arguments to deno:' \
":: :_pipelight__enable_commands" \
"*::: :->enable" \
&& ret=0

    case $state in
    (enable)
        words=($line[2] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pipelight-enable-command-$line[2]:"
        case $line[2] in
            (git-hooks)
_arguments "${_arguments_options[@]}" \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(watcher)
_arguments "${_arguments_options[@]}" \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_pipelight__enable__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pipelight-enable-help-command-$line[1]:"
        case $line[1] in
            (git-hooks)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(watcher)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(disable)
_arguments "${_arguments_options[@]}" \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'::raw -- Pass those arguments to deno:' \
":: :_pipelight__disable_commands" \
"*::: :->disable" \
&& ret=0

    case $state in
    (disable)
        words=($line[2] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pipelight-disable-command-$line[2]:"
        case $line[2] in
            (git-hooks)
_arguments "${_arguments_options[@]}" \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(watcher)
_arguments "${_arguments_options[@]}" \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_pipelight__disable__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pipelight-disable-help-command-$line[1]:"
        case $line[1] in
            (git-hooks)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(watcher)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(run)
_arguments "${_arguments_options[@]}" \
'--flag=[Manualy set a flag/action to bypass environment computation]:FLAG: ' \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'::name -- The pipeline name:' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(trigger)
_arguments "${_arguments_options[@]}" \
'--flag=[Manualy set a flag/action to bypass environment computation]:FLAG: ' \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(watch)
_arguments "${_arguments_options[@]}" \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" \
'--flag=[Manualy set a flag/action to bypass environment computation]:FLAG: ' \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'::name -- The pipeline name:' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(ls)
_arguments "${_arguments_options[@]}" \
'--color=[Ignore the environment and enforce/disable colored output]:COLOR: ' \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'--json[Display logs in json format]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'::name -- The pipeline name:' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(inspect)
_arguments "${_arguments_options[@]}" \
'--color=[Ignore the environment and enforce/disable colored output]:COLOR: ' \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'--json[Display logs in json format]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'::name -- The pipeline name:' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" \
'--color=[Ignore the environment and enforce/disable colored output]' \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'--json[Display logs in json format]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'::name -- The pipeline name:' \
'::raw -- Pass those arguments to deno:' \
":: :_pipelight__logs_commands" \
"*::: :->logs" \
&& ret=0

    case $state in
    (logs)
        words=($line[3] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pipelight-logs-command-$line[3]:"
        case $line[3] in
            (rm)
_arguments "${_arguments_options[@]}" \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_pipelight__logs__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pipelight-logs-help-command-$line[1]:"
        case $line[1] in
            (rm)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(completion)
_arguments "${_arguments_options[@]}" \
'--name=[The shell name]:NAME:(bash zsh fish elvish)' \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(init)
_arguments "${_arguments_options[@]}" \
'--file=[The output file path]:FILE: ' \
'--template=[The template style]:TEMPLATE:(objects helpers javascript toml yaml)' \
'--config=[The folowing args are global arguments available for every subcommands]:FILE:_files' \
'--attach=[Attach command to standard I/O]' \
'*-v[More output per occurrence]' \
'*--verbose[More output per occurrence]' \
'(-v --verbose)*-q[Less output per occurrence]' \
'(-v --verbose)*--quiet[Less output per occurrence]' \
'*-u[More output per occurrence]' \
'*--internal-verbose[More output per occurrence]' \
'-h[Print help]' \
'--help[Print help]' \
'*::raw -- Pass those arguments to deno:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_pipelight__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pipelight-help-command-$line[1]:"
        case $line[1] in
            (enable)
_arguments "${_arguments_options[@]}" \
":: :_pipelight__help__enable_commands" \
"*::: :->enable" \
&& ret=0

    case $state in
    (enable)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pipelight-help-enable-command-$line[1]:"
        case $line[1] in
            (git-hooks)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(watcher)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(disable)
_arguments "${_arguments_options[@]}" \
":: :_pipelight__help__disable_commands" \
"*::: :->disable" \
&& ret=0

    case $state in
    (disable)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pipelight-help-disable-command-$line[1]:"
        case $line[1] in
            (git-hooks)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(watcher)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(run)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(trigger)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(watch)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(stop)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(ls)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(inspect)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" \
":: :_pipelight__help__logs_commands" \
"*::: :->logs" \
&& ret=0

    case $state in
    (logs)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:pipelight-help-logs-command-$line[1]:"
        case $line[1] in
            (rm)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
(completion)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(init)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_pipelight_commands] )) ||
_pipelight_commands() {
    local commands; commands=(
'enable:' \
'disable:' \
'run:Run a pipeline (interactive)' \
'trigger:Manualy trigger pipelines' \
'watch:Launch a watcher on the working directory (debugging)' \
'stop:Stop the pipeline execution and its every child processes' \
'ls:List available pipelines with a few more useful informations' \
'inspect:Displays pipelines with the maximum verbosity level (interactive)' \
'logs:Display pipelines logs' \
'completion:Generate autocompletion script for most used shells (bash/zsh/fish)' \
'init:Create a \`pipelight\` config template file' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pipelight commands' commands "$@"
}
(( $+functions[_pipelight__completion_commands] )) ||
_pipelight__completion_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight completion commands' commands "$@"
}
(( $+functions[_pipelight__help__completion_commands] )) ||
_pipelight__help__completion_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help completion commands' commands "$@"
}
(( $+functions[_pipelight__disable_commands] )) ||
_pipelight__disable_commands() {
    local commands; commands=(
'git-hooks:Git hooks toggle' \
'watcher:Watcher toggle' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pipelight disable commands' commands "$@"
}
(( $+functions[_pipelight__help__disable_commands] )) ||
_pipelight__help__disable_commands() {
    local commands; commands=(
'git-hooks:Git hooks toggle' \
'watcher:Watcher toggle' \
    )
    _describe -t commands 'pipelight help disable commands' commands "$@"
}
(( $+functions[_pipelight__enable_commands] )) ||
_pipelight__enable_commands() {
    local commands; commands=(
'git-hooks:Git hooks toggle' \
'watcher:Watcher toggle' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pipelight enable commands' commands "$@"
}
(( $+functions[_pipelight__help__enable_commands] )) ||
_pipelight__help__enable_commands() {
    local commands; commands=(
'git-hooks:Git hooks toggle' \
'watcher:Watcher toggle' \
    )
    _describe -t commands 'pipelight help enable commands' commands "$@"
}
(( $+functions[_pipelight__disable__git-hooks_commands] )) ||
_pipelight__disable__git-hooks_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight disable git-hooks commands' commands "$@"
}
(( $+functions[_pipelight__disable__help__git-hooks_commands] )) ||
_pipelight__disable__help__git-hooks_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight disable help git-hooks commands' commands "$@"
}
(( $+functions[_pipelight__enable__git-hooks_commands] )) ||
_pipelight__enable__git-hooks_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight enable git-hooks commands' commands "$@"
}
(( $+functions[_pipelight__enable__help__git-hooks_commands] )) ||
_pipelight__enable__help__git-hooks_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight enable help git-hooks commands' commands "$@"
}
(( $+functions[_pipelight__help__disable__git-hooks_commands] )) ||
_pipelight__help__disable__git-hooks_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help disable git-hooks commands' commands "$@"
}
(( $+functions[_pipelight__help__enable__git-hooks_commands] )) ||
_pipelight__help__enable__git-hooks_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help enable git-hooks commands' commands "$@"
}
(( $+functions[_pipelight__disable__help_commands] )) ||
_pipelight__disable__help_commands() {
    local commands; commands=(
'git-hooks:Git hooks toggle' \
'watcher:Watcher toggle' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pipelight disable help commands' commands "$@"
}
(( $+functions[_pipelight__disable__help__help_commands] )) ||
_pipelight__disable__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight disable help help commands' commands "$@"
}
(( $+functions[_pipelight__enable__help_commands] )) ||
_pipelight__enable__help_commands() {
    local commands; commands=(
'git-hooks:Git hooks toggle' \
'watcher:Watcher toggle' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pipelight enable help commands' commands "$@"
}
(( $+functions[_pipelight__enable__help__help_commands] )) ||
_pipelight__enable__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight enable help help commands' commands "$@"
}
(( $+functions[_pipelight__help_commands] )) ||
_pipelight__help_commands() {
    local commands; commands=(
'enable:' \
'disable:' \
'run:Run a pipeline (interactive)' \
'trigger:Manualy trigger pipelines' \
'watch:Launch a watcher on the working directory (debugging)' \
'stop:Stop the pipeline execution and its every child processes' \
'ls:List available pipelines with a few more useful informations' \
'inspect:Displays pipelines with the maximum verbosity level (interactive)' \
'logs:Display pipelines logs' \
'completion:Generate autocompletion script for most used shells (bash/zsh/fish)' \
'init:Create a \`pipelight\` config template file' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pipelight help commands' commands "$@"
}
(( $+functions[_pipelight__help__help_commands] )) ||
_pipelight__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help help commands' commands "$@"
}
(( $+functions[_pipelight__logs__help_commands] )) ||
_pipelight__logs__help_commands() {
    local commands; commands=(
'rm:Clear logs' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pipelight logs help commands' commands "$@"
}
(( $+functions[_pipelight__logs__help__help_commands] )) ||
_pipelight__logs__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight logs help help commands' commands "$@"
}
(( $+functions[_pipelight__help__init_commands] )) ||
_pipelight__help__init_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help init commands' commands "$@"
}
(( $+functions[_pipelight__init_commands] )) ||
_pipelight__init_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight init commands' commands "$@"
}
(( $+functions[_pipelight__help__inspect_commands] )) ||
_pipelight__help__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help inspect commands' commands "$@"
}
(( $+functions[_pipelight__inspect_commands] )) ||
_pipelight__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight inspect commands' commands "$@"
}
(( $+functions[_pipelight__help__logs_commands] )) ||
_pipelight__help__logs_commands() {
    local commands; commands=(
'rm:Clear logs' \
    )
    _describe -t commands 'pipelight help logs commands' commands "$@"
}
(( $+functions[_pipelight__logs_commands] )) ||
_pipelight__logs_commands() {
    local commands; commands=(
'rm:Clear logs' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'pipelight logs commands' commands "$@"
}
(( $+functions[_pipelight__help__ls_commands] )) ||
_pipelight__help__ls_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help ls commands' commands "$@"
}
(( $+functions[_pipelight__ls_commands] )) ||
_pipelight__ls_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight ls commands' commands "$@"
}
(( $+functions[_pipelight__help__logs__rm_commands] )) ||
_pipelight__help__logs__rm_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help logs rm commands' commands "$@"
}
(( $+functions[_pipelight__logs__help__rm_commands] )) ||
_pipelight__logs__help__rm_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight logs help rm commands' commands "$@"
}
(( $+functions[_pipelight__logs__rm_commands] )) ||
_pipelight__logs__rm_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight logs rm commands' commands "$@"
}
(( $+functions[_pipelight__help__run_commands] )) ||
_pipelight__help__run_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help run commands' commands "$@"
}
(( $+functions[_pipelight__run_commands] )) ||
_pipelight__run_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight run commands' commands "$@"
}
(( $+functions[_pipelight__help__stop_commands] )) ||
_pipelight__help__stop_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help stop commands' commands "$@"
}
(( $+functions[_pipelight__stop_commands] )) ||
_pipelight__stop_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight stop commands' commands "$@"
}
(( $+functions[_pipelight__help__trigger_commands] )) ||
_pipelight__help__trigger_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help trigger commands' commands "$@"
}
(( $+functions[_pipelight__trigger_commands] )) ||
_pipelight__trigger_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight trigger commands' commands "$@"
}
(( $+functions[_pipelight__help__watch_commands] )) ||
_pipelight__help__watch_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help watch commands' commands "$@"
}
(( $+functions[_pipelight__watch_commands] )) ||
_pipelight__watch_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight watch commands' commands "$@"
}
(( $+functions[_pipelight__disable__help__watcher_commands] )) ||
_pipelight__disable__help__watcher_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight disable help watcher commands' commands "$@"
}
(( $+functions[_pipelight__disable__watcher_commands] )) ||
_pipelight__disable__watcher_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight disable watcher commands' commands "$@"
}
(( $+functions[_pipelight__enable__help__watcher_commands] )) ||
_pipelight__enable__help__watcher_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight enable help watcher commands' commands "$@"
}
(( $+functions[_pipelight__enable__watcher_commands] )) ||
_pipelight__enable__watcher_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight enable watcher commands' commands "$@"
}
(( $+functions[_pipelight__help__disable__watcher_commands] )) ||
_pipelight__help__disable__watcher_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help disable watcher commands' commands "$@"
}
(( $+functions[_pipelight__help__enable__watcher_commands] )) ||
_pipelight__help__enable__watcher_commands() {
    local commands; commands=()
    _describe -t commands 'pipelight help enable watcher commands' commands "$@"
}

if [ "$funcstack[1]" = "_pipelight" ]; then
    _pipelight "$@"
else
    compdef _pipelight pipelight
fi
